---
import Layout from '../layouts/Layout.astro';
import { execSync } from 'child_process';
import { readdirSync, statSync } from 'fs';
import { join } from 'path';
import { getCollection } from 'astro:content';

// Get all surf spots for the map preview
const spots = await getCollection('spots');

// Fetch recent git commits during build
let recentCommits: Array<{ hash: string; date: string; message: string; url: string }> = [];
try {
  const gitLog = execSync(
    'git log -5 --pretty=format:"%h|%ai|%s"',
    { encoding: 'utf-8' }
  );
  recentCommits = gitLog.split('\n').map(line => {
    const [hash, date, message] = line.split('|');
    return {
      hash,
      date: new Date(date).toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
      }),
      message,
      url: `https://github.com/surfdeeper/surfdeeper/commit/${hash}`
    };
  });
} catch (error) {
  console.warn('Could not fetch git log:', error);
}

// Fetch recently updated pages
interface UpdatedPage {
  title: string;
  url: string;
  date: string;
  timestamp: number;
  hierarchy: string;
}

let recentlyUpdated: UpdatedPage[] = [];
try {
  const contentPath = 'src/content';
  const allFiles: string[] = [];
  
  // Recursively find all markdown files
  function findMarkdownFiles(dir: string, baseDir: string = dir) {
    const entries = readdirSync(dir, { withFileTypes: true });
    for (const entry of entries) {
      const fullPath = join(dir, entry.name);
      if (entry.isDirectory()) {
        findMarkdownFiles(fullPath, baseDir);
      } else if (entry.name.endsWith('.md') && entry.name !== 'README.md') {
        allFiles.push(fullPath);
      }
    }
  }
  
  findMarkdownFiles(contentPath);
  
  // Get last modified date for each file from git
  const filesWithDates: UpdatedPage[] = [];
  
  for (const filePath of allFiles) {
    try {
      const gitDate = execSync(
        `git log -1 --format="%ai" -- "${filePath}"`,
        { encoding: 'utf-8' }
      ).trim();
      
      if (gitDate) {
        const timestamp = new Date(gitDate).getTime();
        
        // Extract title, hierarchy, and create URL
        let url = '';
        let title = '';
        let hierarchy = '';
        
        if (filePath.includes('content/guides/')) {
          const match = filePath.match(/content\/guides\/([^/]+)\/([^/]+)\.md$/);
          if (match) {
            const [, category, slug] = match;
            url = `/guide/${category}/${slug}`;
            title = slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            const categoryFormatted = category.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            hierarchy = `Guide > ${categoryFormatted}`;
          }
        } else if (filePath.includes('content/spots/')) {
          const match = filePath.match(/content\/spots\/([^/]+)\.md$/);
          if (match) {
            const slug = match[1];
            url = `/maps/${slug}`;
            title = slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            hierarchy = 'Map';
          }
        }
        
        if (url && title) {
          filesWithDates.push({
            title,
            url,
            date: new Date(gitDate).toLocaleDateString('en-US', {
              month: 'short',
              day: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            }),
            timestamp,
            hierarchy
          });
        }
      }
    } catch (err) {
      // Skip files not in git yet
      continue;
    }
  }
  
  // Sort by timestamp (most recent first) and take top 5
  recentlyUpdated = filesWithDates
    .sort((a, b) => b.timestamp - a.timestamp)
    .slice(0, 5);
    
} catch (error) {
  console.warn('Could not fetch recently updated pages:', error);
}
---

<Layout title="Surf Deeper" description="Open source surfing guide for skills and spots. Community-driven knowledge for surfers of all levels.">
  <header class="hero">
    <h1>Surf Deeper</h1>
    <p class="tagline">Open source surfing guide for skills and spots</p>
  </header>

  <section class="content">
    <div class="content-grid">
      <div class="content-card">
        <h2>üèÑ Skills</h2>
        <p>Step-by-step technique guides from paddling basics to advanced maneuvers. Learn at your own pace with clear, detailed instructions.</p>
        <a href="/guide" class="cta-link">Browse Guides ‚Üí</a>
      </div>
      
      <div class="content-card">
        <h2>üó∫Ô∏è Spots</h2>
        <p>Discover surf breaks with maps, conditions, local insights, and hazards contributed by the community.</p>
        <a href="/maps" class="cta-link">Explore Spots ‚Üí</a>
      </div>
    </div>

    <div class="about-box">
      <p><strong>Free and open source</strong> ‚Äî Built by surfers, for surfers. <a href="/contribute">Contribute your knowledge</a> to help others learn and progress.</p>
    </div>

    <div class="map-preview-section">
      <h2>Surf Spots Map Preview</h2>
      <p class="map-preview-description">Explore surf breaks along the California coast</p>
      <div id="map-preview" class="map-preview-container"></div>
      <a href="/maps" class="map-view-all-link">View Full Interactive Map ‚Üí</a>
    </div>

    {(recentlyUpdated.length > 0 || recentCommits.length > 0) && (
      <div class="updates-grid">
        {recentlyUpdated.length > 0 && (
          <div class="updates-section">
            <h2>Recently Updated Guides</h2>
            <ul class="updates-list">
              {recentlyUpdated.map(page => (
                <li class="update-item">
                  <span class="update-date">{page.date}</span>
                  <a href={page.url} class="update-message">
                    <span class="page-hierarchy">{page.hierarchy}</span>
                    <span class="page-title">{page.title}</span>
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )}

        {recentCommits.length > 0 && (
          <div class="updates-section">
            <h2>Recent Git Commits</h2>
            <ul class="updates-list">
              {recentCommits.map(commit => (
                <li class="update-item">
                  <span class="update-date">{commit.date}</span>
                  <a href={commit.url} target="_blank" rel="noopener noreferrer" class="update-message">
                    {commit.message}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    )}

    
  </section>
</Layout>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin="" defer></script>

<script
  type="application/json"
  id="spots-data"
  set:html={JSON.stringify(spots.map((s) => ({
    title: s.data.title,
    description: s.data.description || '',
    latitude: s.data.latitude,
    longitude: s.data.longitude,
    slug: s.slug,
  })))}
></script>

<script is:inline>
  function initMapPreview() {
    if (!window.L) {
      requestAnimationFrame(initMapPreview);
      return;
    }

    const dataElement = document.getElementById('spots-data');
    if (!dataElement) return;
    
    let spots = [];
    try {
      const json = dataElement.textContent || '[]';
      spots = JSON.parse(json);
    } catch (error) {
      console.error('Failed to parse spots JSON:', error);
      return;
    }

    const map = window.L.map('map-preview', {
      scrollWheelZoom: false,
      dragging: true,
      zoomControl: true,
    });
    
    const tiles = window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    });
    tiles.addTo(map);

    for (const spot of spots) {
      if (typeof spot.latitude === 'number' && typeof spot.longitude === 'number') {
        const marker = window.L.marker([spot.latitude, spot.longitude]).addTo(map);
        const popup = `
          <div style="font-family: inherit;">
            <b>${spot.title}</b>
            ${spot.description ? `<br/>${spot.description}` : ''}
            <div style="margin-top: 0.75rem; padding-top: 0.5rem; border-top: 1px solid rgba(0, 255, 136, 0.2);">
              <a href="/maps/${spot.slug}" style="display: inline-block; color: #0f172a; background-color: #00ff88; font-size: 0.95rem; font-weight: 600; text-decoration: none; padding: 0.5rem 1rem; border-radius: 4px; text-align: center;">View Spot ‚Üí</a>
            </div>
          </div>
        `;
        marker.bindPopup(popup);
      }
    }

    // Set view to show entire Santa Cruz to Bolinas coastline
    map.setView([37.44, -122.36], 9);
  }

  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    initMapPreview();
  } else {
    document.addEventListener('DOMContentLoaded', initMapPreview);
  }
</script>

<style>
  .hero {
    text-align: center;
    margin-bottom: 2rem;
    padding: 0;
  }

  .hero h1 {
    color: #00ff88;
    font-size: 3rem;
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    letter-spacing: 0.02em;
  }

  .tagline {
    color: #00ff88;
    font-size: 1.25rem;
    opacity: 0.9;
    margin: 0;
  }

  .content {
    max-width: 900px;
    margin: 0 auto;
  }

  .content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .content-card {
    background-color: #1e293b;
    border: 2px solid #334155;
    border-radius: 8px;
    padding: 2rem;
    transition: border-color 0.3s ease;
  }

  .content-card:hover {
    border-color: #00ff88;
  }

  .content-card h2 {
    color: #00ff88;
    font-size: 1.5rem;
    margin: 0 0 1rem 0;
  }

  .content-card p {
    color: #00ff88;
    opacity: 0.9;
    margin: 0 0 1.5rem 0;
    line-height: 1.6;
  }

  .cta-link {
    color: #00ff88;
    text-decoration: none;
    font-weight: 600;
    transition: opacity 0.2s ease;
  }

  .cta-link:hover {
    opacity: 0.8;
  }

  .about-box {
    background-color: #1e293b;
    border: 2px solid #334155;
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
  }

  .about-box p {
    color: #00ff88;
    margin: 0;
    opacity: 0.9;
  }

  .about-box strong {
    color: #00ff88;
    opacity: 1;
  }

  .about-box a {
    color: #00ff88;
    text-decoration: underline;
    text-underline-offset: 3px;
  }

  .updates-grid {
    margin-top: 3rem;
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }

  @media (min-width: 768px) {
    .updates-grid {
      grid-template-columns: 1fr 1fr;
    }
  }

  .updates-section {
    background-color: #1e293b;
    border: 2px solid #334155;
    border-radius: 8px;
    padding: 2rem;
  }

  .updates-section h2 {
    color: #00ff88;
    font-size: 1.5rem;
    margin: 0 0 1.5rem 0;
    text-align: center;
  }

  .updates-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .update-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: 0.75rem 0;
    border-bottom: 1px solid #334155;
  }

  .update-item:last-child {
    border-bottom: none;
  }

  .update-date {
    color: #00ff88;
    opacity: 0.6;
    font-size: 0.75rem;
    white-space: nowrap;
  }

  .update-message {
    color: #00ff88;
    opacity: 0.9;
    line-height: 1.5;
    text-decoration: none;
    transition: opacity 0.2s ease;
    display: flex;
    align-items: baseline;
    gap: 0.5rem;
  }

  .update-message:hover {
    opacity: 1;
    text-decoration: underline;
  }

  .page-hierarchy {
    font-size: 0.75rem;
    opacity: 0.7;
    font-weight: 500;
    letter-spacing: 0.02em;
    white-space: nowrap;
  }

  .page-title {
    font-size: 0.95rem;
  }

  /* Map Preview Section */
  .map-preview-section {
    margin-top: 3rem;
    background-color: #1e293b;
    border: 2px solid #334155;
    border-radius: 8px;
    padding: 2rem;
    transition: border-color 0.3s ease;
  }

  .map-preview-section:hover {
    border-color: #00ff88;
  }

  .map-preview-section h2 {
    color: #00ff88;
    font-size: 1.5rem;
    margin: 0 0 0.5rem 0;
    text-align: center;
  }

  .map-preview-description {
    color: #00ff88;
    opacity: 0.9;
    text-align: center;
    margin: 0 0 1.5rem 0;
  }

  .map-preview-container {
    width: 100%;
    height: 400px;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid #334155;
    margin-bottom: 1.5rem;
  }

  .map-view-all-link {
    display: block;
    text-align: center;
    color: #00ff88;
    text-decoration: none;
    font-weight: 600;
    font-size: 1.1rem;
    transition: opacity 0.2s ease;
  }

  .map-view-all-link:hover {
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    .map-preview-container {
      height: 300px;
    }
  }
</style>
