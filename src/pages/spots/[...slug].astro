---
import Layout from "../../layouts/Layout.astro";
import { getCollection, getEntryBySlug } from "astro:content";
import { serializeSpot } from "../../utils/spot-data";

export async function getStaticPaths() {
  const entries = await getCollection("spots");
  return entries.map((e) => ({ params: { slug: e.slug } }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug("spots", slug);

if (!entry) {
  throw Astro.redirect("/spots");
}

const { Content } = await entry.render();
const { data } = entry;
const serializedSpot = serializeSpot(entry);
---

<Layout
  title={data.title}
  description={data.description}
  editPath={`src/content/spots/${entry.slug}.md`}
>
  <div class="spot-page-wrapper">
    <div class="three-column-layout">
      <!-- Main Content -->
      <section class="content">
        <article class="spot-article">
          <h1>{data.title}</h1>

          <div class="conditions-section">
            <h2>üåä Current Conditions</h2>
            <div id="conditions-loading" class="conditions-loading">
              Loading conditions...
            </div>
            <div
              id="conditions-data"
              class="conditions-data"
              style="display: none;"
            >
              <div class="conditions-horizontal">
                <div class="condition-item">
                  <div class="condition-label">Swell</div>
                  <div class="condition-value" id="swell-height">--</div>
                  <div class="condition-meta" id="swell-meta">--</div>
                </div>
                <div class="condition-item">
                  <div class="condition-label">Wind</div>
                  <div class="condition-value" id="wind-speed">--</div>
                  <div class="condition-meta" id="wind-direction">--</div>
                </div>
                <div class="condition-item">
                  <div class="condition-label">Wave Height</div>
                  <div class="condition-value" id="wave-height">--</div>
                  <div class="condition-meta" id="wave-period">--</div>
                </div>
              </div>
              <div class="conditions-updated" id="conditions-updated">--</div>
            </div>
            <div
              id="conditions-error"
              class="conditions-error"
              style="display: none;"
            >
              Unable to load current conditions
            </div>
          </div>

          <div class="spot-description">
            <Content />
          </div>

          <div class="main-map-section">
            <h2>üìç Location</h2>
            <div id="spot-map" class="spot-map"></div>
          </div>
        </article>
      </section>

      <!-- Right Sidebar -->
      <aside class="right-sidebar">
        <div class="card">
          <h3>üèÑ Skill Level</h3>
          <div class="skill-levels">
            {
              data.skillLevels.map((level: string) => (
                <span class={`skill-badge skill-${level}`}>{level}</span>
              ))
            }
          </div>
        </div>

        <div class="card">
          <h3>üåä Wave Characteristics</h3>
          <dl>
            <dt>Type</dt>
            <dd>{data.waveType}</dd>
            <dt>Bottom</dt>
            <dd>{data.bottom}</dd>
            <dt>Best Size</dt>
            <dd>{data.bestSize}</dd>
            <dt>Swell Direction</dt>
            <dd>{data.swellDirection}</dd>
          </dl>
        </div>

        <div class="card">
          <h3>‚ú® Best Conditions</h3>
          <dl>
            <dt>Tide</dt>
            <dd>{data.bestTide}</dd>
            <dt>Wind</dt>
            <dd>{data.bestWind}</dd>
            <dt>Season</dt>
            <dd>{data.bestSeason}</dd>
          </dl>
        </div>

        <div class="card">
          <h3>‚ö†Ô∏è Hazards</h3>
          <ul class="hazards-list">
            {data.hazards.map((hazard: string) => <li>{hazard}</li>)}
          </ul>
        </div>

        <div class="card">
          <h3>üÖøÔ∏è Access</h3>
          <dl>
            <dt>Parking</dt>
            <dd>{data.parking}</dd>
            {
              data.facilities && (
                <>
                  <dt>Facilities</dt>
                  <dd>{data.facilities}</dd>
                </>
              )
            }
          </dl>
        </div>

        <div class="card">
          <h3>üìç Coordinates</h3>
          <p class="coordinates">
            {data.latitude.toFixed(4)}, {data.longitude.toFixed(4)}
          </p>
        </div>
      </aside>
    </div>
  </div>

  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    crossorigin=""
  />
  <script
    is:inline
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    crossorigin=""
    defer></script>

  <script
    type="application/json"
    id="spot-data"
    set:html={JSON.stringify(serializedSpot)}
  />

  <script>
    import {
      MAP_DEFAULTS,
      DEFAULT_THEME_SPOT,
    } from "../../config/map-constants";
    import {
      createBaseMap,
      waitForLeaflet,
      createMarkerWithPopup,
      getStoredTheme,
    } from "../../utils/leaflet-setup";
    import { getSpotDataFromElement } from "../../utils/spot-data";
    import {
      fetchMarineConditions,
      degreesToCardinal,
      metersToFeet,
    } from "../../utils/marine-weather";
    import {
      getTheme,
      addThemeSwitcherToMap,
    } from "../../utils/map-theme-switcher";

    async function loadConditions() {
      const spot = getSpotDataFromElement("spot-data");
      if (!spot) return;

      try {
        const conditions = await fetchMarineConditions(
          spot.latitude,
          spot.longitude,
        );

        if (!conditions) {
          document.getElementById("conditions-loading")!.style.display = "none";
          document.getElementById("conditions-error")!.style.display = "block";
          return;
        }

        // Update UI
        const swellFt = metersToFeet(conditions.swellHeight).toFixed(1);
        const waveFt = metersToFeet(conditions.waveHeight).toFixed(1);
        const windMph = (conditions.windSpeed * 0.621371).toFixed(0);

        document.getElementById("swell-height")!.textContent = `${swellFt} ft`;
        document.getElementById("swell-meta")!.textContent =
          `${conditions.swellPeriod.toFixed(0)}s @ ${degreesToCardinal(conditions.swellDirection)}`;

        document.getElementById("wind-speed")!.textContent = `${windMph} mph`;
        document.getElementById("wind-direction")!.textContent =
          degreesToCardinal(conditions.windDirection);

        document.getElementById("wave-height")!.textContent = `${waveFt} ft`;
        document.getElementById("wave-period")!.textContent =
          `${conditions.wavePeriod.toFixed(0)}s period`;

        const time = new Date(conditions.timestamp).toLocaleTimeString(
          "en-US",
          {
            hour: "numeric",
            minute: "2-digit",
          },
        );
        document.getElementById("conditions-updated")!.textContent =
          `Updated ${time}`;

        document.getElementById("conditions-loading")!.style.display = "none";
        document.getElementById("conditions-data")!.style.display = "block";
      } catch (error) {
        console.error("Error loading conditions:", error);
        document.getElementById("conditions-loading")!.style.display = "none";
        document.getElementById("conditions-error")!.style.display = "block";
      }
    }

    function initSpotMap() {
      waitForLeaflet(() => {
        const spot = getSpotDataFromElement("spot-data");
        if (!spot) return;

        // Get the user's preferred theme or use default
        const currentThemeId = getStoredTheme(DEFAULT_THEME_SPOT);
        const theme = getTheme(currentThemeId, DEFAULT_THEME_SPOT);

        const map = createBaseMap(
          "spot-map",
          [spot.latitude, spot.longitude],
          MAP_DEFAULTS.SPOT_ZOOM,
          theme,
        );
        if (!map) return;

        // Add theme switcher control
        addThemeSwitcherToMap(map, DEFAULT_THEME_SPOT, "topright");

        createMarkerWithPopup(
          map,
          spot.latitude,
          spot.longitude,
          spot.title,
          spot.description,
          true,
        );
      });
    }

    function init() {
      loadConditions();
      initSpotMap();
    }

    if (
      document.readyState === "complete" ||
      document.readyState === "interactive"
    ) {
      init();
    } else {
      document.addEventListener("DOMContentLoaded", init);
    }
  </script>

  <style>
    /* Override main padding for spot pages */
    :global(body:has(.spot-page-wrapper)) {
      overflow-x: hidden;
    }

    :global(body:has(.spot-page-wrapper) main) {
      max-width: 100%;
      padding: 0;
      overflow-x: hidden;
    }

    .spot-page-wrapper {
      width: 100%;
      overflow-x: hidden;
    }

    .spot-page-wrapper * {
      box-sizing: border-box;
    }

    /* Two Column Layout */
    .three-column-layout {
      display: grid;
      grid-template-columns: 1fr;
      gap: 0;
      width: 100%;
      box-sizing: border-box;
    }

    /* Mobile: Stack everything vertically */
    .right-sidebar {
      display: none;
      flex-direction: column;
      gap: 1.5rem;
      padding-top: 2rem;
      padding-bottom: 2rem;
    }

    .content {
      width: 100%;
      margin: 0 auto;
      padding: 0 1rem 2rem;
      box-sizing: border-box;
    }

    @media (max-width: 767px) {
      .content {
        padding: 0 1rem 1.5rem;
      }
    }

    /* Large Desktop: Two Column Layout */
    @media (min-width: 1100px) {
      .three-column-layout {
        grid-template-columns: 1fr 300px;
        gap: 2rem;
        max-width: calc(100vw - 2rem);
        width: 100%;
        margin: 0 auto;
        padding: 0 1rem;
        box-sizing: border-box;
      }

      .content {
        width: 100%;
        padding: 2rem 0;
        min-width: 0;
        order: 1;
      }

      .right-sidebar {
        display: flex;
        min-width: 0;
        order: 2;
      }
    }

    /* Extra Large Desktop: Wider sidebar */
    @media (min-width: 1800px) {
      .three-column-layout {
        grid-template-columns: 1fr 350px;
        max-width: 1600px;
      }
    }

    /* Main map in content area */
    .main-map-section {
      margin-top: var(--space-8);
      background: var(--color-surface-dark);
      border: 2px solid var(--color-border);
      border-radius: var(--radius-base);
      padding: var(--space-6);
      transition: border-color 0.3s ease;
    }

    .main-map-section:hover {
      border-color: var(--color-accent-green);
    }

    .main-map-section h2 {
      font-size: var(--font-size-2xl);
      margin: 0 0 1rem;
      color: var(--color-accent-green);
    }

    .spot-map {
      width: 100%;
      height: 500px;
      border-radius: var(--radius-base);
      overflow: hidden;
      border: 2px solid var(--color-border);
      background-color: var(--color-surface-deep);
    }

    /* Conditions Section */
    .conditions-section {
      background: var(--color-surface-dark);
      border: 2px solid var(--color-border);
      border-radius: var(--radius-base);
      padding: var(--space-6);
      margin-bottom: var(--space-8);
      transition: border-color 0.3s ease;
    }

    .conditions-section:hover {
      border-color: var(--color-accent-green);
    }

    .conditions-section h2 {
      font-size: var(--font-size-2xl);
      margin: 0 0 1rem;
      color: var(--color-accent-green);
    }

    .conditions-loading,
    .conditions-error {
      color: var(--color-text-muted);
      font-style: italic;
      padding: 0.5rem 0;
      font-size: var(--font-size-0-9);
    }

    .conditions-error {
      color: var(--color-danger);
    }

    .conditions-horizontal {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1.5rem;
      margin-bottom: 1rem;
    }

    .condition-item {
      text-align: center;
      padding: var(--space-4);
      background: var(--color-surface-deep);
      border-radius: var(--radius-sm);
      border: 1px solid var(--color-border);
      transition: border-color 0.2s ease;
    }

    .condition-item:hover {
      border-color: var(--color-accent-green);
    }

    .condition-label {
      font-size: var(--font-size-xs);
      color: var(--color-text-muted);
      margin-bottom: 0.5rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .condition-value {
      font-size: var(--font-size-1-75);
      font-weight: 700;
      color: var(--color-accent-green);
      margin-bottom: 0.25rem;
    }

    .condition-meta {
      font-size: var(--font-size-0-85);
      color: var(--color-text-light);
    }

    .conditions-updated {
      text-align: center;
      font-size: var(--font-size-xs);
      color: var(--color-text-dim);
      margin-top: 0.5rem;
      padding-top: 1rem;
      border-top: 1px solid var(--color-border);
    }

    /* Main Content Styles */
    .spot-article {
      width: 100%;
      box-sizing: border-box;
    }

    h1 {
      font-size: var(--font-size-4xl);
      margin-bottom: 1rem;
      color: var(--color-accent-green);
    }

    .spot-description {
      font-size: var(--font-size-lg);
      line-height: 1.6;
      margin-bottom: 1rem;
      padding: 1.5rem;
      background: var(--color-surface-dark);
      border-left: 4px solid var(--color-accent-green);
      border-radius: var(--radius-sm);
      color: var(--color-text-light);
    }

    .skill-levels {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .skill-badge {
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: 600;
      text-transform: capitalize;
      font-size: var(--font-size-sm);
    }

    .skill-beginner {
      background: var(--color-mint-light);
      color: var(--color-state-success-text);
    }

    .skill-intermediate {
      background: #fff3cd;
      color: var(--color-state-warning-text);
    }

    .skill-advanced {
      background: #f8d7da;
      color: var(--color-state-danger-text);
    }

    dl {
      display: grid;
      grid-template-columns: 1fr;
      gap: 0.5rem;
      margin: 0;
      font-size: var(--font-size-0-9);
    }

    dt {
      font-weight: 600;
      color: var(--color-accent-green);
      font-size: var(--font-size-xs);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      opacity: 0.8;
    }

    dd {
      margin: 0 0 0.75rem;
      color: var(--color-text-light);
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--color-border);
    }

    dd:last-of-type {
      margin-bottom: 0;
      padding-bottom: 0;
      border-bottom: none;
    }

    .hazards-list {
      margin: 0;
      padding-left: 1.25rem;
      color: var(--color-text-light);
      font-size: var(--font-size-0-9);
    }

    .hazards-list li {
      margin-bottom: 0.5rem;
    }

    .hazards-list li:last-child {
      margin-bottom: 0;
    }

    .coordinates {
      font-family: monospace;
      font-size: var(--font-size-0-95);
      color: var(--color-text-light);
      margin: 0;
      text-align: center;
      padding: 0.75rem;
      background: var(--color-surface-deep);
      border-radius: var(--radius-sm);
      border: 1px solid var(--color-border);
    }

    @media (max-width: 768px) {
      .conditions-horizontal {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
    }

    @media (max-width: 640px) {
      h1 {
        font-size: var(--font-size-3xl);
      }

      .spot-article {
        padding: 0;
      }

      .condition-value {
        font-size: var(--font-size-2xl);
      }

      .conditions-section {
        padding: 1rem;
        margin-bottom: 1.5rem;
      }

      .conditions-section h2 {
        font-size: var(--font-size-xl);
      }

      .spot-map {
        height: 350px;
      }

      .main-map-section {
        padding: 1rem;
      }

      .main-map-section h2 {
        font-size: var(--font-size-xl);
      }
    }
  </style>
</Layout>
