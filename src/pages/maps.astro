---
import MapLayout from '../layouts/MapLayout.astro';
import { getCollection } from 'astro:content';
import { serializeSpots } from '../utils/spot-data';

import '../styles/spot-guides.css';

const spots = await getCollection('spots');
const serializedSpots = serializeSpots(spots);
---

<MapLayout title="Spots - Surf Deeper" description="Discover surf spots with maps, local insights, tide charts, and hazards contributed by the community.">
  <button id="view-toggle" class="view-toggle" aria-label="Toggle between map and directory">
    <span class="toggle-icon" id="toggle-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </span>
  </button>

  <div id="map-view" class="map-view active">
    <div id="map"></div>
  </div>

  <div id="directory-view" class="directory-view">
    <div class="directory-container">
      <div class="directory-header">
        <h1>Surf Spots Directory</h1>
        <p class="directory-description">Browse all surf spots with detailed information</p>
      </div>
      <div class="directory-content">
        <ul class="spots-list">
          {spots.map((spot) => (
            <li class="spot-item">
              <a href={`/spots/${spot.slug}`} class="spot-link">
                <h3>{spot.data.title}</h3>
                {spot.data.description && <p class="spot-excerpt">{spot.data.description}</p>}
                <div class="spot-meta">
                  <span class="skill-levels">
                    {spot.data.skillLevels.map((level: string) => (
                      <span class={`skill-badge skill-${level}`}>{level}</span>
                    ))}
                  </span>
                  <span class="wave-type">{spot.data.waveType}</span>
                </div>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</MapLayout>

 

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin="" defer></script>

<script
  type="application/json"
  id="spots-data"
  set:html={JSON.stringify(serializedSpots)}
></script>

<script>
  import { MAP_DEFAULTS, DEFAULT_THEME_FULL_MAP } from '../config/map-constants';
  import { createBaseMap, waitForLeaflet, getStoredTheme } from '../utils/leaflet-setup';
  import { getSpotsDataFromElement } from '../utils/spot-data';
  import { createPopupContent, showContributionInstructions, setupMarkerInteractions } from '../scripts/spot-guides-helpers';
  import { getTheme, addThemeSwitcherToMap } from '../utils/map-theme-switcher';

  function initMap() {
    waitForLeaflet(() => {
      const spots = getSpotsDataFromElement('spots-data');
      
      // Get the user's preferred theme or use default
      const currentThemeId = getStoredTheme(DEFAULT_THEME_FULL_MAP);
      const theme = getTheme(currentThemeId, DEFAULT_THEME_FULL_MAP);
      
      const map = createBaseMap('map', MAP_DEFAULTS.CENTER, MAP_DEFAULTS.ZOOM, theme);
      if (!map) return;

      // Add theme switcher control
      addThemeSwitcherToMap(map, DEFAULT_THEME_FULL_MAP, 'topright');

      const L = (window as any).L;
      for (const spot of spots) {
        if (typeof spot.latitude === 'number' && typeof spot.longitude === 'number') {
          const marker = L.marker([spot.latitude, spot.longitude]).addTo(map);
          const popup = createPopupContent(spot, marker, false);
          marker.bindPopup(popup);
          marker.spotData = spot;
          setupMarkerInteractions(marker, spot, createPopupContent, showContributionInstructions);
        }
      }
    });
  }

  function initViewToggle() {
    const toggleBtn = document.getElementById('view-toggle');
    const mapView = document.getElementById('map-view');
    const directoryView = document.getElementById('directory-view');
    
    if (!toggleBtn || !mapView || !directoryView) return;
    
    toggleBtn.addEventListener('click', () => {
      const isMapActive = mapView.classList.contains('active');
      
      if (isMapActive) {
        mapView.classList.remove('active');
        directoryView.classList.add('active');
        toggleBtn.classList.add('directory-active');
      } else {
        directoryView.classList.remove('active');
        mapView.classList.add('active');
        toggleBtn.classList.remove('directory-active');
      }
    });
  }

  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    initMap();
    initViewToggle();
  } else {
    document.addEventListener('DOMContentLoaded', () => {
      initMap();
      initViewToggle();
    });
  }
</script>


