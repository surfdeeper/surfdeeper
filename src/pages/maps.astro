---
import MapLayout from '../layouts/MapLayout.astro';
import { getCollection } from 'astro:content';
import { serializeSpots } from '../utils/spot-data';

import '../styles/spot-guides.css';

const spots = await getCollection('spots');
const serializedSpots = serializeSpots(spots);
---

<MapLayout title="Spots - Surf Deeper" description="Discover surf spots with maps, local insights, tide charts, and hazards contributed by the community.">
  <button id="view-toggle" class="view-toggle" aria-label="Toggle between map and directory">
    <span class="toggle-icon" id="toggle-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </span>
  </button>

  <div id="map-view" class="map-view active">
    <div id="map"></div>
    <div id="spot-list-panel" class="spot-list-panel">
      <h3>Spots on Map</h3>
      <ul id="spot-list"></ul>
    </div>
  </div>

  <div id="directory-view" class="directory-view">
    <div class="directory-container">
      <div class="directory-header">
        <h1>Surf Spots Directory</h1>
        <p class="directory-description">Browse all surf spots with detailed information</p>
      </div>
      <div class="directory-content">
        <ul class="spots-list">
          {spots.map((spot) => (
            <li class="spot-item">
              <a href={`/spots/${spot.slug}`} class="spot-link">
                <h3>{spot.data.title}</h3>
                {spot.data.description && <p class="spot-excerpt">{spot.data.description}</p>}
                <div class="spot-meta">
                  <span class="skill-levels">
                    {spot.data.skillLevels.map((level: string) => (
                      <span class={`skill-badge skill-${level}`}>{level}</span>
                    ))}
                  </span>
                  <span class="wave-type">{spot.data.waveType}</span>
                </div>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</MapLayout>

 

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin="" defer></script>

<script
  type="application/json"
  id="spots-data"
  set:html={JSON.stringify(serializedSpots)}
></script>

<script>
  import { MAP_DEFAULTS, DEFAULT_THEME_FULL_MAP } from '../config/map-constants';
  import { createBaseMap, waitForLeaflet, getStoredTheme } from '../utils/leaflet-setup';
  import { getSpotsDataFromElement } from '../utils/spot-data';
  import { createPopupContent, showContributionInstructions, setupMarkerInteractions } from '../scripts/spot-guides-helpers';
  import { getTheme, addThemeSwitcherToMap } from '../utils/map-theme-switcher';

  function initMap() {
    waitForLeaflet(() => {
      const spots = getSpotsDataFromElement('spots-data');
      
      // Get the user's preferred theme or use default
      const currentThemeId = getStoredTheme(DEFAULT_THEME_FULL_MAP);
      const theme = getTheme(currentThemeId, DEFAULT_THEME_FULL_MAP);
      
      const map = createBaseMap('map', MAP_DEFAULTS.CENTER, MAP_DEFAULTS.ZOOM, theme);
      if (!map) return;

      // Add theme switcher control
      addThemeSwitcherToMap(map, DEFAULT_THEME_FULL_MAP, 'topright');

      const L = (window as any).L;
      const spotList = document.getElementById('spot-list');
      const markers: any[] = [];
      
      // Sort spots alphabetically for consistent numbering
      const sortedSpots = [...spots].sort((a, b) => a.title.localeCompare(b.title));
      
      sortedSpots.forEach((spot, index) => {
        if (typeof spot.latitude === 'number' && typeof spot.longitude === 'number') {
          const spotNumber = index + 1;
          
          // Create numbered marker
          const icon = L.divIcon({
            className: 'numbered-marker',
            html: `<div class="marker-content"><span class="marker-number">${spotNumber}</span></div>`,
            iconSize: [36, 36],
            iconAnchor: [18, 36],
            popupAnchor: [0, -36]
          });
          
          const marker = L.marker([spot.latitude, spot.longitude], { icon }).addTo(map);
          const popup = createPopupContent(spot, marker, false);
          marker.bindPopup(popup);
          marker.spotData = spot;
          marker.spotNumber = spotNumber;
          setupMarkerInteractions(marker, spot, createPopupContent, showContributionInstructions);
          
          markers.push(marker);
          
          // Add spot to list panel
          if (spotList) {
            const listItem = document.createElement('li');
            listItem.className = 'spot-list-item';
            listItem.dataset.spotNumber = spotNumber.toString();
            listItem.innerHTML = `
              <span class="spot-number">${spotNumber}.</span>
              <div class="spot-info">
                <span class="spot-name">${spot.title}</span>
              </div>
            `;
            
            // Click to zoom to spot
            listItem.addEventListener('click', () => {
              map.setView([spot.latitude, spot.longitude], 13);
              marker.openPopup();
            });
            
            // Hover effects
            listItem.addEventListener('mouseenter', () => {
              marker.getElement()?.classList.add('highlight');
            });
            listItem.addEventListener('mouseleave', () => {
              marker.getElement()?.classList.remove('highlight');
            });
            
            marker.on('mouseover', () => {
              listItem.classList.add('highlight');
            });
            marker.on('mouseout', () => {
              listItem.classList.remove('highlight');
            });
            
            spotList.appendChild(listItem);
          }
        }
      });
    });
  }

  function initViewToggle() {
    const toggleBtn = document.getElementById('view-toggle');
    const mapView = document.getElementById('map-view');
    const directoryView = document.getElementById('directory-view');
    
    if (!toggleBtn || !mapView || !directoryView) return;
    
    toggleBtn.addEventListener('click', () => {
      const isMapActive = mapView.classList.contains('active');
      
      if (isMapActive) {
        mapView.classList.remove('active');
        directoryView.classList.add('active');
        toggleBtn.classList.add('directory-active');
      } else {
        directoryView.classList.remove('active');
        mapView.classList.add('active');
        toggleBtn.classList.remove('directory-active');
      }
    });
  }

  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    initMap();
    initViewToggle();
  } else {
    document.addEventListener('DOMContentLoaded', () => {
      initMap();
      initViewToggle();
    });
  }
</script>

<style>
  /* Numbered marker styles */
  :global(.numbered-marker) {
    background: none;
    border: none;
  }

  :global(.numbered-marker .marker-content) {
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  :global(.numbered-marker .marker-number) {
    width: 32px;
    height: 32px;
    background: #00ff88;
    color: #0f172a;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 14px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    border: 3px solid #0f172a;
    transition: all 0.2s ease;
  }

  :global(.numbered-marker .marker-content::after) {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-top: 8px solid #0f172a;
  }

  :global(.numbered-marker.highlight .marker-number) {
    background: #fbbf24;
    transform: scale(1.2);
    box-shadow: 0 4px 16px rgba(251, 191, 36, 0.6);
  }

  /* Spot list panel styles - ultra-compact horizontal strip */
  .spot-list-panel {
    position: absolute;
    bottom: 30px;
    left: 10px;
    right: 10px;
    height: auto;
    background: rgba(15, 23, 42, 0.9);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(0, 255, 136, 0.4);
    border-radius: 6px;
    padding: 4px 8px;
    z-index: 1000;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
  }

  .spot-list-panel h3 {
    display: none;
  }

  .spot-list-panel ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 0;
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-width: none;
  }

  .spot-list-panel ul::-webkit-scrollbar {
    display: none;
  }

  :global(.spot-list-item) {
    display: flex;
    align-items: center;
    gap: 0;
    padding: 4px 12px;
    margin: 0;
    background: transparent;
    border: none;
    border-right: 1px solid rgba(0, 255, 136, 0.2);
    cursor: pointer;
    transition: all 0.15s ease;
    flex-shrink: 0;
    white-space: nowrap;
  }

  :global(.spot-list-item:last-child) {
    border-right: none;
  }

  :global(.spot-list-item:hover),
  :global(.spot-list-item.highlight) {
    background: rgba(0, 255, 136, 0.15);
  }

  :global(.spot-list-item .spot-number) {
    color: #00ff88;
    font-weight: 700;
    font-size: 12px;
    margin-right: 4px;
    flex-shrink: 0;
  }

  :global(.spot-list-item.highlight .spot-number) {
    color: #fbbf24;
  }

  :global(.spot-list-item .spot-info) {
    min-width: 0;
  }

  :global(.spot-list-item .spot-name) {
    color: #e2e8f0;
    font-weight: 400;
    font-size: 12px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 120px;
  }

  :global(.spot-list-item.highlight .spot-name) {
    color: #fbbf24;
    font-weight: 500;
  }

  /* Mobile responsive - even more compact */
  @media (max-width: 768px) {
    .spot-list-panel {
      bottom: 25px;
      left: 5px;
      right: 5px;
      padding: 3px 6px;
    }

    :global(.spot-list-item) {
      padding: 3px 10px;
    }

    :global(.spot-list-item .spot-number) {
      font-size: 11px;
      margin-right: 3px;
    }

    :global(.spot-list-item .spot-name) {
      font-size: 11px;
      max-width: 100px;
    }
  }
</style>


